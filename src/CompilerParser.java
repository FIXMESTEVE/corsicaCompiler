
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 14:49:15 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 14:49:15 CET 2013
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\007\000\002\004\006\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\003\000\002\007\005\000\002\010\004" +
    "\000\002\010\002\000\002\006\007\000\002\005\007\000" +
    "\002\005\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\014\002\uffff\040\uffff\050\uffff\051\uffff\053" +
    "\uffff\001\002\000\014\002\011\040\012\050\013\051\006" +
    "\053\015\001\002\000\014\002\000\040\000\050\000\051" +
    "\000\053\000\001\002\000\004\004\055\001\002\000\020" +
    "\002\ufffc\040\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\001\002\000\020\002\ufffb\040\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\001\002\000\004\002\001\001" +
    "\002\000\006\035\047\047\046\001\002\000\004\004\022" +
    "\001\002\000\020\002\ufffd\040\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\001\002\000\014\040\uffee\050\uffee" +
    "\051\uffee\053\uffee\054\uffee\001\002\000\020\002\ufffe\040" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002" +
    "\000\014\040\012\050\013\051\006\053\015\054\021\001" +
    "\002\000\014\040\uffef\050\uffef\051\uffef\053\uffef\054\uffef" +
    "\001\002\000\020\002\ufff0\040\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\001\002\000\012\011\026\034\024" +
    "\040\023\041\025\001\002\000\016\005\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\015\ufff1\001\002\000\012\011\026" +
    "\034\024\040\023\041\025\001\002\000\016\005\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\001\002\000\012" +
    "\011\026\034\024\040\023\041\025\001\002\000\014\005" +
    "\034\010\031\011\032\012\030\013\033\001\002\000\012" +
    "\011\026\034\024\040\023\041\025\001\002\000\012\011" +
    "\026\034\024\040\023\041\025\001\002\000\012\011\026" +
    "\034\024\040\023\041\025\001\002\000\012\011\026\034" +
    "\024\040\023\041\025\001\002\000\012\040\012\050\013" +
    "\051\006\053\015\001\002\000\020\002\uffec\040\uffec\050" +
    "\uffec\051\uffec\052\036\053\uffec\054\uffec\001\002\000\012" +
    "\040\012\050\013\051\006\053\015\001\002\000\020\002" +
    "\uffeb\040\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\001\002\000\016\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\001\002\000\016\005\ufff7\010\ufff7\011\ufff7" +
    "\012\030\013\033\015\ufff7\001\002\000\016\005\ufff8\010" +
    "\ufff8\011\ufff8\012\030\013\033\015\ufff8\001\002\000\016" +
    "\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\001" +
    "\002\000\016\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\001\002\000\016\005\ufff4\010\031\011\032\012" +
    "\030\013\033\015\ufff4\001\002\000\012\011\026\034\024" +
    "\040\023\041\025\001\002\000\004\047\050\001\002\000" +
    "\012\011\026\034\024\040\023\041\025\001\002\000\014" +
    "\010\031\011\032\012\030\013\033\015\052\001\002\000" +
    "\020\002\ufffa\040\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\001\002\000\014\010\031\011\032\012\030\013" +
    "\033\015\054\001\002\000\020\002\ufff9\040\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002\000\012\011" +
    "\026\034\024\040\023\041\025\001\002\000\014\005\057" +
    "\010\031\011\032\012\030\013\033\001\002\000\012\040" +
    "\012\050\013\051\006\053\015\001\002\000\020\002\uffed" +
    "\040\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\002\003\001\001\000\014\003\004\004" +
    "\015\005\013\006\006\007\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\016\001\001\000\002\001\001\000" +
    "\014\003\017\004\015\005\013\006\006\007\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\026\001" +
    "\001\000\002\001\001\000\004\011\044\001\001\000\002" +
    "\001\001\000\004\011\043\001\001\000\002\001\001\000" +
    "\004\011\042\001\001\000\004\011\041\001\001\000\004" +
    "\011\040\001\001\000\004\011\037\001\001\000\014\003" +
    "\034\004\015\005\013\006\006\007\007\001\001\000\002" +
    "\001\001\000\014\003\036\004\015\005\013\006\006\007" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\052\001\001\000\002" +
    "\001\001\000\004\011\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\055\001\001\000\002\001\001\000\014\003\057\004" +
    "\015\005\013\006\006\007\007\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {


	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }

  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ifInstr ::= IF LPAR expression RPAR instruction ELSE instruction 
            {
              Instruction RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int ifInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int ifInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Instruction ifInstr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int elseInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int elseInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction elseInstr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new Else(cond, ifInstr, elseInstr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("ifInstr",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifInstr ::= IF LPAR expression RPAR instruction 
            {
              Instruction RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new If(cond, instr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("ifInstr",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // whileInstr ::= WHILE LPAR expression RPAR instruction 
            {
              Instruction RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new While(cond,instr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("whileInstr",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subFlow ::= 
            {
              Vector<Instruction> RESULT =null;
		 Vector<Instruction> vectorInstr = new Vector<Instruction>(); RESULT = vectorInstr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subFlow",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // subFlow ::= subFlow instruction 
            {
              Vector<Instruction> RESULT =null;
		int vectorInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int vectorInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Vector<Instruction> vectorInstr = (Vector<Instruction>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 vectorInstr.add(instr); RESULT = vectorInstr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subFlow",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block ::= LBRACKET subFlow RBRACKET 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Vector<Instruction> f = (Vector<Instruction>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new BlockInstruction(f); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= VAR 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new VariableExpression(v); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= NUMBERINT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ConstantExpression(n); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new UnaryArithmeticExpression(EnumOps.MINUS,expr1); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new UnaryArithmeticExpression(EnumOps.NOT,expr1); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new BinaryArithmeticOperation(expr1, EnumOps.DIV, expr2); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new BinaryArithmeticOperation(expr1, EnumOps.MULT, expr2); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new BinaryArithmeticOperation(expr1, EnumOps.MINUS, expr2); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new BinaryArithmeticOperation(expr1, EnumOps.PLUS, expr2); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assign ::= VAR ASSIGN expression SEMIC 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new Assign(var, expr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assign",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assign ::= VAR TYPE ASSIGN expression SEMIC 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new Assign(var, expr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assign",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= block 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= whileInstr 
            {
              Instruction RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = instr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= ifInstr 
            {
              Instruction RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = instr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= assign 
            {
              Instruction RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction ass = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = ass; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // flow ::= 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("flow",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // flow ::= flow instruction 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 	Label nextLabel = new Label();
								instr.generateCode(nextLabel);
								System.out.println(nextLabel.print() + ":"); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("flow",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= flow EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

