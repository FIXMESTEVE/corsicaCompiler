
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 00:19:16 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 00:19:16 CET 2013
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\007\000\002\004\006\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\006\005\000\002" +
    "\007\004\000\002\007\002\000\002\005\007\000\002\005" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\012\002\uffff\040\uffff\050\uffff\052\uffff\001" +
    "\002\000\012\002\011\040\006\050\014\052\013\001\002" +
    "\000\012\002\000\040\000\050\000\052\000\001\002\000" +
    "\006\035\032\047\033\001\002\000\016\002\ufffe\040\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\016\002" +
    "\ufffd\040\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\004\002\001\001\002\000\016\002\ufffc\040\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\012\040\ufff4" +
    "\050\ufff4\052\ufff4\053\ufff4\001\002\000\004\004\015\001" +
    "\002\000\006\040\016\041\017\001\002\000\010\005\ufff7" +
    "\010\ufff7\015\ufff7\001\002\000\010\005\ufff8\010\ufff8\015" +
    "\ufff8\001\002\000\006\005\022\010\021\001\002\000\006" +
    "\040\016\041\017\001\002\000\010\040\006\050\014\052" +
    "\013\001\002\000\016\002\ufff3\040\ufff3\050\ufff3\051\024" +
    "\052\ufff3\053\ufff3\001\002\000\010\040\006\050\014\052" +
    "\013\001\002\000\016\002\ufff2\040\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\001\002\000\010\005\ufff9\010\ufff9\015" +
    "\ufff9\001\002\000\012\040\006\050\014\052\013\053\031" +
    "\001\002\000\012\040\ufff5\050\ufff5\052\ufff5\053\ufff5\001" +
    "\002\000\016\002\ufff6\040\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\001\002\000\004\047\036\001\002\000\006\040" +
    "\016\041\017\001\002\000\006\010\021\015\035\001\002" +
    "\000\016\002\ufffa\040\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\001\002\000\006\040\016\041\017\001\002\000\006" +
    "\010\021\015\040\001\002\000\016\002\ufffb\040\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\002\003\001\001\000\012\003\004\004" +
    "\006\005\007\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\026\001\001\000\002" +
    "\001\001\000\004\010\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\025\001\001" +
    "\000\012\003\022\004\006\005\007\006\011\001\001\000" +
    "\002\001\001\000\012\003\024\004\006\005\007\006\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\027\004\006\005\007\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\036" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {


	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }

  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ifInstr ::= IF LPAR expression RPAR instruction ELSE instruction 
            {
              Instruction RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int ifInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int ifInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Instruction ifInstr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int elseInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int elseInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction elseInstr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new Else(cond, ifInstr, elseInstr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("ifInstr",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ifInstr ::= IF LPAR expression RPAR instruction 
            {
              Instruction RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new If(cond, instr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("ifInstr",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // subFlow ::= 
            {
              Vector<Instruction> RESULT =null;
		 Vector<Instruction> vectorInstr = new Vector<Instruction>(); RESULT = vectorInstr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subFlow",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subFlow ::= subFlow instruction 
            {
              Vector<Instruction> RESULT =null;
		int vectorInstrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int vectorInstrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Vector<Instruction> vectorInstr = (Vector<Instruction>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 vectorInstr.add(instr); RESULT = vectorInstr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subFlow",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= LBRACKET subFlow RBRACKET 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Vector<Instruction> f = (Vector<Instruction>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new BlockInstruction(f); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= VAR 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new VariableExpression(v); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= NUMBERINT 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ConstantExpression(n); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new BinaryArithmeticOperation(expr1, EnumOps.PLUS, expr2); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assign ::= VAR ASSIGN expression SEMIC 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new Assign(var, expr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assign",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assign ::= VAR TYPE ASSIGN expression SEMIC 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new Assign(var, expr); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assign",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= block 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= ifInstr 
            {
              Instruction RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = instr; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= assign 
            {
              Instruction RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction ass = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = ass; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // flow ::= 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("flow",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // flow ::= flow instruction 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Instruction instr = (Instruction)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 	Label nextLabel = new Label();
								instr.generateCode(nextLabel);
								System.out.println(nextLabel.print() + ":"); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("flow",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= flow EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

