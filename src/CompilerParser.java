
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 20 11:26:13 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 20 11:26:13 CET 2013
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\002\001\002\000\004\002\007\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\006\002\003\003\004\001\001\000\004\003" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {


	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }

  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= ID LPAR listargs RPAR 
            {
              Object RESULT =null;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= OP exp 
            {
              Object RESULT =null;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= exp OP exp 
            {
              Object RESULT =null;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= ID 
            {
              Object RESULT =null;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= NUM 
            {
              Object RESULT =null;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= p 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statements p 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

