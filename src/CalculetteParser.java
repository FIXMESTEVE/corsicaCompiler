
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 09 11:53:00 CEST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 09 11:53:00 CEST 2013
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\060\003\013\004\006\006\uffe6\007\004\010" +
    "\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\014\030" +
    "\uffe6\031\uffe6\032\uffe6\034\005\035\012\036\010\001\002" +
    "\000\062\004\006\005\uffe6\006\uffe6\007\004\010\uffe6\011" +
    "\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\005\035\012\036\010\001\002" +
    "\000\050\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\001\002\000\056\004\006\005\uffe6\006\uffe6\007\004" +
    "\010\uffe6\011\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6" +
    "\031\uffe6\032\uffe6\034\005\035\012\036\010\001\002\000" +
    "\062\002\063\003\013\004\006\006\uffe6\007\004\010\uffe6" +
    "\011\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6" +
    "\031\uffe6\032\uffe6\034\005\035\012\036\010\001\002\000" +
    "\050\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\001\002\000\062\002\uffff\003\uffff\004\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\013\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\032\uffff\034\uffff\035\uffff\036\uffff" +
    "\001\002\000\050\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\001\002\000\004\013\062\001\002\000\062" +
    "\004\006\005\uffe6\006\uffe6\007\004\010\uffe6\011\uffe6\013" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\005\035\012\036\010\001\002\000\044" +
    "\006\027\007\016\010\025\011\032\013\020\016\023\017" +
    "\026\020\034\021\035\022\031\023\033\024\024\025\017" +
    "\026\036\030\030\031\021\032\022\001\002\000\062\004" +
    "\006\005\uffe6\006\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\005\035\012\036\010\001\002\000\062\004" +
    "\006\005\uffe6\006\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\005\035\012\036\010\001\002\000\062\002" +
    "\ufffe\003\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\013\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000\062\004" +
    "\006\005\uffe6\006\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\005\035\012\036\010\001\002\000\056\004" +
    "\006\006\uffe6\007\004\010\uffe6\011\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\062\004\006\005\uffe6\006" +
    "\uffe6\007\004\010\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\014\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005" +
    "\035\012\036\010\001\002\000\050\005\ufff0\006\027\007" +
    "\016\010\025\011\032\013\ufff0\016\023\017\026\020\034" +
    "\021\035\022\031\023\033\024\024\025\ufff0\026\ufff0\030" +
    "\030\031\021\032\022\033\ufff0\001\002\000\050\005\ufff5" +
    "\006\027\007\016\010\025\011\032\013\ufff5\016\023\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\001\002\000" +
    "\050\005\ufff6\006\027\007\016\010\025\011\032\013\ufff6" +
    "\016\023\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\001\002\000\050\005\ufff3\006\027\007\016\010\025\011" +
    "\032\013\ufff3\016\023\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\001\002\000\050\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\001\002\000\050\005\ufff4\006" +
    "\027\007\016\010\025\011\032\013\ufff4\016\023\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\001\002\000\050" +
    "\005\uffef\006\027\007\016\010\025\011\032\013\uffef\016" +
    "\023\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef\001" +
    "\002\000\050\005\ufffc\006\ufffc\007\ufffc\010\025\011\032" +
    "\013\ufffc\016\023\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\001\002\000\050\005\ufff7\006\027\007\016\010" +
    "\025\011\032\013\ufff7\016\023\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\001\002\000\050\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\013\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\001\002\000\050\005" +
    "\ufff2\006\027\007\016\010\025\011\032\013\ufff2\016\023" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002" +
    "\000\050\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\001\002\000\044\006\027\007\016\010\025\011\032" +
    "\016\023\017\026\020\034\021\035\022\031\023\033\024" +
    "\024\025\017\026\036\030\030\031\021\032\022\033\054" +
    "\001\002\000\062\004\006\005\uffe6\006\uffe6\007\004\010" +
    "\uffe6\011\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\014\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\005\035\012\036\010" +
    "\001\002\000\050\005\uffed\006\027\007\016\010\025\011" +
    "\032\013\uffed\016\023\017\026\020\034\021\035\022\031" +
    "\023\033\024\024\025\uffed\026\uffed\030\030\031\021\032" +
    "\uffed\033\uffed\001\002\000\050\005\uffee\006\027\007\016" +
    "\010\025\011\032\013\uffee\016\023\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\001\002\000\050\005\ufff1\006" +
    "\027\007\016\010\025\011\032\013\ufff1\016\023\017\026" +
    "\020\034\021\035\022\031\023\033\024\024\025\ufff1\026" +
    "\ufff1\030\030\031\021\032\022\033\ufff1\001\002\000\050" +
    "\005\ufffb\006\ufffb\007\ufffb\010\025\011\032\013\ufffb\016" +
    "\023\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\001" +
    "\002\000\050\005\uffeb\006\027\007\016\010\025\011\032" +
    "\013\uffeb\016\023\017\026\020\034\021\035\022\031\023" +
    "\033\024\024\025\017\026\036\030\030\031\021\032\022" +
    "\033\uffeb\001\002\000\062\002\ufffd\003\ufffd\004\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\001\002\000\004\002\001\001\002\000\062\002" +
    "\000\003\000\004\000\006\000\007\000\010\000\011\000" +
    "\013\000\016\000\017\000\020\000\021\000\022\000\023" +
    "\000\024\000\025\000\026\000\027\000\030\000\031\000" +
    "\032\000\034\000\035\000\036\000\001\002\000\044\005" +
    "\066\006\027\007\016\010\025\011\032\016\023\017\026" +
    "\020\034\021\035\022\031\023\033\024\024\025\017\026" +
    "\036\030\030\031\021\032\022\001\002\000\050\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\001\002\000" +
    "\050\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\010\002\006\003\010\004\014\001\001\000" +
    "\004\004\066\001\001\000\002\001\001\000\004\004\064" +
    "\001\001\000\006\003\063\004\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\060\001\001\000\002\001\001\000\004\004" +
    "\057\001\001\000\004\004\056\001\001\000\002\001\001" +
    "\000\004\004\055\001\001\000\004\004\052\001\001\000" +
    "\004\004\051\001\001\000\004\004\050\001\001\000\004" +
    "\004\047\001\001\000\004\004\046\001\001\000\004\004" +
    "\045\001\001\000\004\004\044\001\001\000\004\004\043" +
    "\001\001\000\004\004\042\001\001\000\004\004\041\001" +
    "\001\000\004\004\040\001\001\000\004\004\037\001\001" +
    "\000\004\004\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {


	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }

  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= 
            {
              ArbreSyntAbstr RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= COMPLEX 
            {
              ArbreSyntAbstr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Complex n = (Complex)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(EnumTag.COMPLEX, n); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= REAL 
            {
              ArbreSyntAbstr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(EnumTag.REAL, n); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= INTEGER 
            {
              ArbreSyntAbstr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(EnumTag.INTEGER, n); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= MINUS expr 
            {
              ArbreSyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(null, e, EnumTag.MINUS, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NOT expr 
            {
              ArbreSyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(null, e, EnumTag.NOT, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LPAR expr RPAR 
            {
              ArbreSyntAbstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		ArbreSyntAbstr e = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 RESULT = e; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr QUEST expr COLON expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e3 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, new ArbreSyntAbstr(e2, e3, EnumTag.COLON, null), EnumTag.QUEST, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr EQUIV expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.EQUIV, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr IMPL expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.IMPL, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr OR expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.OR, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AND expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.AND, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GE expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.GE, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr GT expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.GT, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LE expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.LE, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr LT expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.LT, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr DIFF expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.DIFF, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EQ expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.EQ, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MOD expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.MOD, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIV expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.DIV, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MULT expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.MULT, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MINUS expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.MINUS, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS expr 
            {
              ArbreSyntAbstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		ArbreSyntAbstr e1 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		ArbreSyntAbstr e2 = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new ArbreSyntAbstr(e1, e2, EnumTag.PLUS, null); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= error SEMIC 
            {
              Object RESULT =null;
		
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= expr SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		ArbreSyntAbstr e = (ArbreSyntAbstr)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 System.out.println(e); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

