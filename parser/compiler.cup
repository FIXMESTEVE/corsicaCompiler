// CUP specification for a simple expression evaluator (w/ actions)

//todo: % et ! (not)

import java_cup.runtime.*;
import java.lang.Number;



action code {:
	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }
:};

parser code {:
	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}
:};

init with {:

:};


terminal LPAR, RPAR, PLUS, MINUS, TIMES, DIVIDE, MINUS_U, SEMIC, AND, OR, EQUAL, DIFF, INF, INFE, SUP, SUPE, AFFECT, TRUE, FALSE;
terminal NUMBER, PROP, VAR;
terminal INT, UINT, FLOAT, BOOL, CHAR;

non terminal statements, statement;

non terminal expr_num;
non terminal expr_bool;
non terminal expr_complex;
non terminal expr_num_decl;
non terminal expr_bool_decl;

non terminal tab;
non terminal tabmultidim;
non terminal chaine;

precedence left OR;
precedence left AND;
precedence left EQUAL, DIFF;
precedence left INF, SUP, INFE, SUPE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left MINUS_U;

start with statements;

statements ::=
	statements statement
	|statement;

statement ::=	
	expr_num:e SEMIC {: :}
	|expr_bool:e SEMIC {: :}
	|expr_complex:e SEMIC {: :}
	|expr_num_decl SEMIC {: :}
	|expr_bool_decl SEMIC {: :}			 
	;

expr_num_decl ::=
	VAR:n INT {: :}
	|VAR:n UINT {: :}
	|VAR:n FLOAT {:  :}
	|VAR:n1 INT AFFECT NUMBER:n2 {: :}
	|VAR:n1 UINT AFFECT NUMBER:n2 {: :}
	|VAR:n1 FLOAT AFFECT NUMBER:n2 {:  :}	
	|VAR:n1 AFFECT expr_num:n2 {: :}
	;

expr_bool_decl ::=
	VAR:p BOOL {: :}
	|VAR:p1 BOOL AFFECT PROP:p2 {: :}
	|VAR:p1 AFFECT expr_bool:p2 {: :}
	;

expr_num ::=
	expr_num:n1 PLUS expr_num:n2 {: :}
	|expr_num:n1 MINUS expr_num:n2 {: :}
	|expr_num:n1 TIMES expr_num:n2 {: :}
	|expr_num:n1 DIVIDE expr_num:n2 {: :}
	|LPAR:lpar expr_num:e RPAR:rpar {: :}
	|NUMBER:n {:  :}
	|VAR:n1 {: :}
	;    

expr_bool ::=
	expr_bool:p1 AND expr_bool:p2 {: :}
	|expr_bool:p1 OR expr_bool:p2 {:  :}
	|expr_num:n1 EQUAL expr_num:n2 {:  :}
	|expr_num:n1 DIFF expr_num:n2 {:  :}
	|expr_bool:p1 EQUAL expr_bool:p2 {:  :}
	|expr_bool:p1 DIFF expr_bool:p2 {:  :}
	|expr_num:n1 SUP expr_num:n2 {:  :}
	|expr_num:n1 INF expr_num:n2 {:  :}
	|expr_num:n1 SUPE expr_num:n2 {:  :}
	|expr_num:n1 INFE expr_num:n2 {:  :}
	|PROP:p {:  :} 
	|VAR:p {: :}
	;





