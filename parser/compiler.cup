// CUP specification for a simple expression evaluator (w/ actions)

//todo: % et ! (not)

import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;


action code {:
	public void show_error(int ligne, int colonne) {
         System.out.println("--- Error ---" );
         System.out.println("Ligne " +ligne+ " -- Colonne " +colonne);
    }

    HashMap<String,EnumType> varTab = new HashMap<String,EnumType>();
    Stack<HashMap> stack = new Stack<HashMap>();
:};

parser code {:
	public void syntax_error(Symbol cur_token){
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
        report_error("Syntax error", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
	{
		System.out.println("--- Error ---" );
        System.out.println("Ligne " +(cur_token.left + 1)+ " -- Colonne " + (cur_token.right + 1));
		System.out.println("unrecovered_syntax_error");
	}
:};

init with {:

:};

terminal LPAR, RPAR, LPARTAB, RPARTAB, PLUS, MINUS, MULT, DIV, MINUS_U, SEMIC, AND, OR, EQUAL, DIFF, INF, INFE, SUP, SUPE, AFFECT, TRUE, FALSE, TAB, INDTAB, MOD, NOT, COLON, LSQUAREBRACKET, RSQUAREBRACKET;
terminal PROP, CHAINE;
terminal EnumType TYPE;
terminal String VAR;
terminal Integer NUMBERINT;
terminal Float NUMBERFLOAT;
terminal String CHARACTER;
terminal String STRING;
terminal INT, UINT, FLOAT, BOOL, CHAR;
terminal ASSIGN;
terminal IF, WHILE;
terminal ELSE;
terminal LBRACKET;
terminal RBRACKET;



non terminal flow;
non terminal Instruction instruction;
non terminal Instruction assign;
non terminal Instruction ifInstr;
non terminal Instruction whileInstr;
non terminal Instruction block;
non terminal declaration;
non terminal Vector<Instruction> subFlow;
non terminal Vector<Expression> array;
non terminal Expression expression;

precedence left OR;
precedence left AND;
precedence left EQUAL, DIFF;
precedence left INF, SUP, INFE, SUPE;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left MINUS_U;

precedence right ELSE;

start with flow;

flow ::=
	flow instruction:instr {: 	if(instr != null){
									Label nextLabel = new Label();
									instr.generateCode(nextLabel);
									System.out.println(nextLabel.print() + ":"); 
								} :}
	|						{: stack.push(varTab); :}
	;

instruction ::=
	assign:a {: RESULT = a; :}
	| ifInstr:instr {: RESULT = instr; :}
	| whileInstr:instr {: RESULT = instr; :}
	| block:b {: RESULT = b; :}
	| declaration:d {: RESULT = null; :}
	;

declaration ::=
	TYPE:type VAR:var SEMIC {: RESULT = null; varTab.put(var, type); :}
	|TYPE:type VAR:var array SEMIC {: RESULT = null; varTab.put(var, type); :}
	;
assign ::=
	TYPE:type VAR:var ASSIGN expression:expr SEMIC {: varTab.put(var, type); RESULT = new Assign(var, expr); :}
	|VAR:var ASSIGN expression:expr SEMIC {: VariableTableManager.verify(varTab, var); RESULT = new Assign(var, expr); :}
	|TYPE:type VAR:var LSQUAREBRACKET expression:i RSQUAREBRACKET ASSIGN expression:expr SEMIC {: varTab.put(var, type); RESULT = new Assign(var, i, expr); :}
	|VAR:var LSQUAREBRACKET expression:i RSQUAREBRACKET ASSIGN expression:expr SEMIC {: VariableTableManager.verify(varTab, var); RESULT = new Assign(var, i, expr); :}
	;

expression ::=
	expression:expr1 EQUAL expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.EQ, expr2); :}
	|expression:expr1 DIFF expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.DIFF, expr2); :}
	|expression:expr1 INF expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.LT, expr2); :}
	|expression:expr1 INFE expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.LE, expr2); :}
	|expression:expr1 SUP expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.GT, expr2); :}
	|expression:expr1 SUPE expression:expr2 {: RESULT = new Comparison(expr1, EnumOps.GE, expr2); :}
	|expression:expr1 PLUS expression:expr2 {: RESULT = new BinaryArithmeticOperation(expr1, EnumOps.PLUS, expr2); :}
	|expression:expr1 MINUS expression:expr2 {: RESULT = new BinaryArithmeticOperation(expr1, EnumOps.MINUS, expr2); :}
	|expression:expr1 MOD expression:expr2 {: RESULT = new BinaryArithmeticOperation(expr1, EnumOps.MOD, expr2); :}
	|expression:expr1 MULT expression:expr2 {: RESULT = new BinaryArithmeticOperation(expr1, EnumOps.MULT, expr2); :}
	|expression:expr1 DIV expression:expr2 {: RESULT = new BinaryArithmeticOperation(expr1, EnumOps.DIV, expr2); :}
	|expression:expr1 AND expression:expr2 {: RESULT = new And(expr1, expr2); :}
	|expression:expr1 OR expression:expr2 {: RESULT = new Or(expr1, expr2); :}
	|NOT expression:expr1 {: RESULT = new UnaryArithmeticExpression(EnumOps.NOT, expr1); :}
	|MINUS expression:expr1 {: RESULT = new UnaryArithmeticExpression(EnumOps.MINUS, expr1); :}
	|PLUS expression:expr1 {: RESULT = expr1; :}
	|LPAR expression:expr1 RPAR {: RESULT = expr1; :}  
 	|VAR:v {: VariableTableManager.verify(varTab, v); RESULT = new VariableExpression(v); :}
 	|NUMBERINT:n {: RESULT = new ConstantExpression(n); :}
 	|NUMBERFLOAT:n {: RESULT = new ConstantExpression(n); :}
	|BOOL:b {: RESULT = new ConstantExpression(b); :}
	|VAR:v array:a {: VariableTableManager.verify(varTab, v); RESULT = new Array(v, a);:}
	|CHARACTER:c {: RESULT = new ConstantExpression(c); :}
	|STRING:s {: RESULT = new ConstantExpression(s); :}
	;


block ::= 
	LBRACKET {: stack.push(stack.peek()); :} subFlow:f RBRACKET {: stack.pop(); RESULT = new BlockInstruction(f); :}
	;

subFlow ::=
	subFlow:vectorInstr instruction:instr {: vectorInstr.add(instr); RESULT = vectorInstr; :}
	| {: Vector<Instruction> vectorInstr = new Vector<Instruction>(); RESULT = vectorInstr; :}
	;

array ::=
	array:a LSQUAREBRACKET expression:e RSQUAREBRACKET {: a.add(e); RESULT = a; :}
	| LSQUAREBRACKET expression:e RSQUAREBRACKET {: Vector<Expression> v = new Vector<Expression>(); v.add(e); RESULT = v;:}
	;
whileInstr ::=
	WHILE LPAR expression:cond RPAR instruction:instr {: RESULT = new While(cond,instr); :}
	;


ifInstr ::=
	IF LPAR expression:cond RPAR instruction:instr {: RESULT = new If(cond, instr); :}
	|IF LPAR expression:cond RPAR instruction:ifInstr ELSE instruction:elseInstr {: RESULT = new Else(cond, ifInstr, elseInstr); :}
	;
